
#ifndef _COORDSYS_H_
#define _COORDSYS_H_ 

#include <REAL.H>
#include <Array.H>
#include <Box.H>

class FArrayBox;

//
// Coordinate System
//
// Routines for mapping between physical coordinate system and index space.
//

class CoordSys
{
public:

    enum CoordType { undef = -1, cartesian = 0, RZ = 1, SPHERICAL = 2,
     CYLINDRICAL=3 };
    //
    // Nice ASCII output.
    //
    friend std::ostream& operator<< (std::ostream&, const CoordSys& );
    //
    // Nice ASCII input.
    //
    friend std::istream& operator>> (std::istream&, CoordSys& );
    //
    // Default constructor to undefined state.
    //
    CoordSys ();
    //
    // Construct, specify a cell size, and low end of index range.
    //
    CoordSys (const Real* cell_dx);
    //
    // The destructor.
    //
    ~CoordSys ();
    //
    // Initialize after construction.
    //
    void define (const Real* cell_dx);
    //
    // Set the CoordType.
    //
    static void SetCoord (CoordType coord) { c_sys = coord; }
    //
    // Returns the CoordType.
    //
    static CoordType Coord ();
    //
    // Returns the CoordType as an int.
    //
    static int CoordInt ();
    //
    // Is CoordType == SPHERICAL?
    //
    static bool IsSPHERICAL ();
    //
    // Is CoordType == RZ?
    //
    static bool IsRZ ();
    static bool IsCYLINDRICAL ();
    //
    // Is CoordType == cartesion?
    //
    static bool IsCartesian () { BL_ASSERT(c_sys != undef); return (c_sys == cartesian); }
    //
    // Sets the offset for each coordinate direction.
    //
    static void SetOffset (const Real* x_lo);
    //
    // Returns the offset.
    //
    static const Real* Offset ()  { return offset; }
    //
    // Returns the offset for the specified coordinate direction.
    //
    static Real Offset (int dir) { return offset[dir]; }
    //
    // Returns the cellsize for each coordinate direction.
    //
    const Real* CellSize () const { BL_ASSERT(ok); return dx; }
    //
    // Returns the cellsize for the specified coordinate direction.
    //
    Real CellSize (int dir) const { BL_ASSERT(ok); return dx[dir]; }

    //! Returns the inverse cellsize for each coordinate direction.
    const Real* InvCellSize () const { BL_ASSERT(ok); return inv_dx; }

    //! Returns the inverse cellsize for the specified coordinate direction.
    Real InvCellSize (int dir) const { BL_ASSERT(ok); return inv_dx[dir]; }

    //
    // Returns location of cell center in specified direction.
    //
    Real CellCenter (int point, int dir) const
    {
        BL_ASSERT(ok); return offset[dir] + dx[dir]*(0.5+ (Real)point);
    }
    //
    // Return location of cell center.
    //
    void CellCenter (const IntVect& point, Array<Real>& loc) const;
    //
    // Return location of cell center.
    //
    void CellCenter (const IntVect& point, Real* loc) const;
    //
    // Returns location of lo edge in specified direction.
    //
    Real LoEdge (int point, int dir) const
    {
        BL_ASSERT(ok); return offset[dir] + dx[dir]*point;
    }
    //
    // Equivalent to LoEdge(point[dir], dir).
    //
    Real LoEdge (const IntVect& point, int dir) const
    {
        BL_ASSERT(ok); return offset[dir] + dx[dir]*point[dir];
    }
    //
    // Returns location of hi edge in specified direction.
    //
    Real HiEdge (int point, int dir) const
    {
        BL_ASSERT(ok); return offset[dir] + dx[dir]*(point + 1);
    }
    //
    // Equivalent to HiEdge(point[dir], dir).
    //
    Real HiEdge (const IntVect& point, int dir) const
    {
        BL_ASSERT(ok); return offset[dir] + dx[dir]*(point[dir] + 1);
    }
    //
    // Sets location of lo face into loc.
    //
    void LoFace (const IntVect& point, int dir, Array<Real>& loc) const;
    //
    // Sets location of lo face into loc.
    //
    void LoFace (const IntVect& point, int dir, Real* loc) const;
    //
    // Sets location of hi face into loc.
    //
    void HiFace (const IntVect& point, int dir, Array<Real>& loc) const;
    //
    // Sets location of hi face into loc.
    //
    void HiFace (const IntVect& point, int dir, Real* loc) const;
    //
    // Return location of lower left hand corner.
    //
    void LoNode (const IntVect& point, Array<Real>& loc) const;
    //
    // Return location of lower left hand corner.
    //
    void LoNode (const IntVect& point, Real* loc) const;
    //
    // Return location of upper right hand corner.
    //
    void HiNode (const IntVect& point, Array<Real>& loc) const;
    //
    // Return location of upper right hand corner.
    //
    void HiNode (const IntVect& point, Real* loc) const;
    //
    // Returns cell centered index of cell containing point.
    // This may return undesired results if point
    // is on a cell boundary.
    // 
    IntVect CellIndex (const Real* point) const;
    //
    // Returns node centered index of lower left hand corner of
    // cell containing this point.
    //
    IntVect LowerIndex (const Real* point) const;
    //
    // Returns node centered index of upper right hand corner of
    // cell containing this point.
    //
    IntVect UpperIndex (const Real* point) const;
    //
    // Return the volume of the specified cell.
    //
    Real Volume (const IntVect& point) const;
    //
    // Return the volume of the specified cell.
    //
    Real Volume (const Real xlo[BL_SPACEDIM],
                 const Real xhi[BL_SPACEDIM]) const;
    //
    // Returns lo face area of given cell in direction dir.
    //
    Real AreaLo (const IntVect& point, int dir) const;
    //
    // Returns hi face area of given cell in direction dir.
    //
    Real AreaHi (const IntVect& point, int dir) const;
    //
    // Return array of physical locations of cell edges
    // in the resize()d input array.
    //
    void GetEdgeLoc (Array<Real>& loc, const Box& region, int dir) const;
    //
    // Return array of physical locations of cell centers
    // in the resize()d input array.
    //
    void GetCellLoc (Array<Real>& loc, const Box& region, int dir) const;
    //
    //
    // Return array of volume coordinates at cell centers
    // for region in given direction.
    //
    void GetCellVolCoord (Array<Real>& loc, const Box& region, int dir) const;

#ifdef BL_USE_MPI
    static void BroadcastCoordSys (CoordSys &geom, int fromProc, MPI_Comm comm);
    static void BroadcastCoordSys (CoordSys &geom, int fromProc, MPI_Comm comm, bool bcastSource);
#endif

protected:
    //
    // Static data.
    //
    static CoordType c_sys;
    static Real      offset[BL_SPACEDIM];
    //
    // Non-static data.
    //  
    Real dx[BL_SPACEDIM];
    Real inv_dx[BL_SPACEDIM];
    bool ok;
};

inline
bool
CoordSys::IsSPHERICAL ()
{
    BL_ASSERT(c_sys != undef);
#if (BL_SPACEDIM <= 2)
    return (c_sys == SPHERICAL);
#endif    
#if (BL_SPACEDIM == 3)
    return false;
#endif    
}

inline
bool
CoordSys::IsRZ ()
{
    BL_ASSERT(c_sys != undef);
#if (BL_SPACEDIM <= 2)
    return (c_sys == RZ);
#endif    
#if (BL_SPACEDIM == 3)
    return false;
#endif    
}

inline
bool
CoordSys::IsCYLINDRICAL ()
{
    BL_ASSERT(c_sys != undef);
    return (c_sys == CYLINDRICAL);
}

#endif /*_COORDSYS_H_*/
